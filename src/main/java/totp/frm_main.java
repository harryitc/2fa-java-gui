package totp;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import lib_totp.code.CodeGenerator;
import lib_totp.code.CodeVerifier;
import lib_totp.code.DefaultCodeGenerator;
import lib_totp.code.DefaultCodeVerifier;
import lib_totp.code.HashingAlgorithm;
import lib_totp.exceptions.QrGenerationException;
import lib_totp.qr.QrData;
import lib_totp.qr.QrGenerator;
import lib_totp.qr.ZxingPngQrGenerator;
import lib_totp.secret.DefaultSecretGenerator;
import lib_totp.secret.SecretGenerator;
import lib_totp.time.SystemTimeProvider;
import lib_totp.time.TimeProvider;
import lib_totp.util.Utils;
import org.apache.commons.codec.binary.Base32;

/**
 *
 * @author AnhEmPhanMem
 */
public class frm_main extends javax.swing.JFrame {

    Timer time, timeStamp;
    private Logger logger = Logger.getLogger(frm_main.class.getName());
    private final int TIME_STEP = 30;

    private final int MAX_WIDTH_QRCODE = 200;
    private final int MAX_HEIGHT_QRCODE = 200;

    private final int DIGIT_TOKEN = 6;

    private int indexUserLogined;

    public frm_main() {
        initComponents();

        this.lb_qrcode.setText("");
        this.btn_login.setEnabled(false);
        this.btn_copy.setEnabled(false);
        this.lb_tokenStatus.setText("");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_title = new javax.swing.JLabel();
        lb_username = new javax.swing.JLabel();
        txt_username = new javax.swing.JTextField();
        lb_password = new javax.swing.JLabel();
        txt_password = new javax.swing.JPasswordField();
        btn_login = new javax.swing.JButton();
        btn_register = new javax.swing.JButton();
        lb_qrcode = new javax.swing.JLabel();
        txt_checktoken = new javax.swing.JTextField();
        lb_checkOTP = new javax.swing.JLabel();
        lb_tokenStatus = new javax.swing.JLabel();
        txt_otpToken = new javax.swing.JTextField();
        btn_copy = new javax.swing.JButton();
        lb_OTPtoken = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_accountpool = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_otpauth = new javax.swing.JTextArea();
        lb_otpauth = new javax.swing.JLabel();
        lb_timer = new javax.swing.JLabel();
        btn_checktoken = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("miniTOTP");
        setMinimumSize(new java.awt.Dimension(550, 550));
        setName("miniTOTP"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(550, 550));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lb_title.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        lb_title.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_title.setText("TOTP");
        lb_title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lb_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 8, -1, -1));

        lb_username.setText("Username:");
        getContentPane().add(lb_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 61, -1, -1));

        txt_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernameActionPerformed(evt);
            }
        });
        getContentPane().add(txt_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 83, 200, -1));

        lb_password.setText("Password:");
        getContentPane().add(lb_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 111, -1, -1));
        getContentPane().add(txt_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 133, 200, -1));

        btn_login.setText("Login");
        btn_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loginActionPerformed(evt);
            }
        });
        getContentPane().add(btn_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 161, -1, -1));

        btn_register.setText("Register");
        btn_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registerActionPerformed(evt);
            }
        });
        getContentPane().add(btn_register, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 161, -1, -1));

        lb_qrcode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_qrcode.setText("QRCode Is HERE!!!");
        lb_qrcode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lb_qrcode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lb_qrcode.setPreferredSize(new java.awt.Dimension(200, 200));
        getContentPane().add(lb_qrcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 30, -1, -1));
        getContentPane().add(txt_checktoken, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 208, 124, -1));

        lb_checkOTP.setText("Check Token TOTP");
        getContentPane().add(lb_checkOTP, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        lb_tokenStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_tokenStatus.setText("Token Status");
        lb_tokenStatus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lb_tokenStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 200, 40, 40));

        txt_otpToken.setFont(new java.awt.Font("Helvetica Neue", 1, 48)); // NOI18N
        txt_otpToken.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_otpToken.setText("888888");
        txt_otpToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_otpTokenActionPerformed(evt);
            }
        });
        getContentPane().add(txt_otpToken, new org.netbeans.lib.awtextra.AbsoluteConstraints(348, 271, -1, 78));

        btn_copy.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btn_copy.setText("Copy");
        btn_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_copyActionPerformed(evt);
            }
        });
        getContentPane().add(btn_copy, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 247, 60, 20));

        lb_OTPtoken.setText("OTP Token");
        getContentPane().add(lb_OTPtoken, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, -1, -1));

        tb_accountpool.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Username", "Password", "Secret Key"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tb_accountpool);
        if (tb_accountpool.getColumnModel().getColumnCount() > 0) {
            tb_accountpool.getColumnModel().getColumn(0).setMinWidth(100);
            tb_accountpool.getColumnModel().getColumn(0).setPreferredWidth(100);
            tb_accountpool.getColumnModel().getColumn(0).setMaxWidth(200);
            tb_accountpool.getColumnModel().getColumn(1).setMinWidth(100);
            tb_accountpool.getColumnModel().getColumn(1).setPreferredWidth(100);
            tb_accountpool.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 355, 505, 120));

        txt_otpauth.setColumns(20);
        txt_otpauth.setLineWrap(true);
        txt_otpauth.setRows(5);
        jScrollPane2.setViewportView(txt_otpauth);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 271, 300, 78));

        lb_otpauth.setText("OTPAuth");
        getContentPane().add(lb_otpauth, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        lb_timer.setText("Timer");
        getContentPane().add(lb_timer, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 250, -1, -1));

        btn_checktoken.setText("Check");
        btn_checktoken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checktokenActionPerformed(evt);
            }
        });
        getContentPane().add(btn_checktoken, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 208, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int row = 0, col = 0;
    private final int MAX_ROW = 10;
    private final int MAX_COLUMN = 3;

    ImageIcon imageValidStatus = new ImageIcon(new ImageIcon("src/assets/icons/valid.png").getImage().getScaledInstance(32, 32, Image.SCALE_DEFAULT));
    ImageIcon imageInvalidStatus = new ImageIcon(new ImageIcon("src/assets/icons/invalid.png").getImage().getScaledInstance(32, 32, Image.SCALE_DEFAULT));

    private void btn_registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registerActionPerformed

        String username = txt_username.getText();
        String password = new String(txt_password.getPassword());

        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (this.isExistedUsernameInTable(username)) {
            JOptionPane.showMessageDialog(this, "Username is existed in table.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password cannot be empty.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SecretGenerator secretGenerator = new DefaultSecretGenerator();
        tb_accountpool.setValueAt(username, row, col++);
        tb_accountpool.setValueAt(password, row, col++);
        tb_accountpool.setValueAt(secretGenerator.generate(), row, col++);

        this.btn_login.setEnabled(true);

        JOptionPane.showMessageDialog(this, "Register successfully!",
                "Success", JOptionPane.NO_OPTION);

        row++;
        col = 0;

        this.lb_tokenStatus.setIcon(null);

//                else {
//            JOptionPane.showMessageDialog(this, "Username or Passowrd isn't correct. Please check again!",
//                    "Error", JOptionPane.ERROR_MESSAGE);
//            this.btn_login.setEnabled(false);
//        }

    }//GEN-LAST:event_btn_registerActionPerformed

    private void txt_otpTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_otpTokenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_otpTokenActionPerformed

//    private String updatetimestamp() {
//        return String.valueOf(System.currentTimeMillis() / 1000L);
//    }
//
//    private String getTime() {
//        long k = 30 - (System.currentTimeMillis() / 1000L % 30);
//        return String.valueOf(k);
//    }

    private void btn_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loginActionPerformed

        for (int i = 0; i < Math.min(MAX_ROW, row); i++) {
            String username = this.tb_accountpool.getValueAt(i, 0).toString();
            String password = this.tb_accountpool.getValueAt(i, 1).toString();
            if (username.equals(this.txt_username.getText()) && password.equals(new String(this.txt_password.getPassword()))) {
                this.indexUserLogined = i;
                this.btn_copy.setEnabled(true);
                this.generateQR();

                JOptionPane.showMessageDialog(this, "Logined success.",
                        "Success", JOptionPane.DEFAULT_OPTION);
                return;
            }
        }

        this.lb_tokenStatus.setIcon(null);
        this.btn_copy.setEnabled(false);

        JOptionPane.showMessageDialog(this, "Username and Passowrd is not correct.",
                "Error", JOptionPane.ERROR_MESSAGE);


    }//GEN-LAST:event_btn_loginActionPerformed

    private void txt_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usernameActionPerformed

    private void btn_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_copyActionPerformed

        StringSelection stringSelection = new StringSelection(this.txt_otpToken.getText());
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
    }//GEN-LAST:event_btn_copyActionPerformed

    private void btn_checktokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_checktokenActionPerformed
        // TODO add your handling code here:
        TimeProvider timeProvider = new SystemTimeProvider();

        // get n-digits code.
        CodeGenerator codeGenerator = new DefaultCodeGenerator();
        CodeVerifier codeVerifier = new DefaultCodeVerifier(codeGenerator, timeProvider);

        // secret = the shared secret for the user
        // code = the code submitted by the user
        boolean successful = codeVerifier.isValidCode(this.tb_accountpool.getValueAt(indexUserLogined, 2).toString(), this.txt_checktoken.getText());

        if (successful) {
            this.lb_tokenStatus.setIcon(this.imageValidStatus);
        } else {
            this.lb_tokenStatus.setIcon(this.imageInvalidStatus);
        }
    }//GEN-LAST:event_btn_checktokenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_main().setVisible(true);
            }
        });
    }

    private void reset_form() {
        final String EMPTY = "";
        this.txt_password.setText(EMPTY);
        this.txt_username.setText(EMPTY);
        this.lb_otpauth.setText(EMPTY);
        this.lb_tokenStatus.setIcon(null);
        this.lb_qrcode.setIcon(null);
        this.txt_otpToken.setText("888888");
        this.lb_timer.setText(EMPTY);
    }

    long currentTime = TIME_STEP - (new SystemTimeProvider().getTime() % TIME_STEP);

    private void start(java.awt.event.ActionEvent evt) {
        TimeProvider timeProvider = new SystemTimeProvider();
        this.lb_timer.setText(String.valueOf(TIME_STEP - (timeProvider.getTime() % TIME_STEP)) + "s");
        time = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String digits = "";
                TimeProvider timeProvider1 = new SystemTimeProvider();
                try {
                    currentTime = TIME_STEP - (timeProvider1.getTime() % TIME_STEP);
                    lb_timer.setText(String.valueOf(currentTime) + "s");
                    digits = getDigitsFromHash(generateHash(tb_accountpool.getValueAt(indexUserLogined, 2).toString(), timeProvider1.getTime() / TIME_STEP));
                    txt_otpToken.setText(digits);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        time.start();
    }

    /**
     * Generate a HMAC-SHA1 hash of the counter number.
     */
    private byte[] generateHash(String key, long counter) throws InvalidKeyException, NoSuchAlgorithmException {
        byte[] data = new byte[8];
        long value = counter;
        for (int i = 8; i-- > 0; value >>>= 8) {
            data[i] = (byte) value;
        }
        // Create a HMAC-SHA1 signing key from the shared key
        Base32 codec = new Base32();
        byte[] decodedKey = codec.decode(key);
        SecretKeySpec signKey = new SecretKeySpec(decodedKey, HashingAlgorithm.SHA1.getHmacAlgorithm());
        Mac mac = Mac.getInstance(HashingAlgorithm.SHA1.getHmacAlgorithm());
        mac.init(signKey);
        // Create a hash of the counter value
        return mac.doFinal(data);
    }

    /**
     * Get the n-digit code for a given hash.
     */
    private String getDigitsFromHash(byte[] hash) {
        int offset = hash[hash.length - 1] & 0xF;
        long truncatedHash = 0;
        for (int i = 0; i < 4; ++i) {
            truncatedHash <<= 8;
            truncatedHash |= (hash[offset + i] & 0xFF);
        }
        truncatedHash &= 0x7FFFFFFF;
        truncatedHash %= Math.pow(10, DIGIT_TOKEN);
        // Left pad with 0s for a n-digit code
        return String.format("%0" + DIGIT_TOKEN + "d", truncatedHash);
    }

    private void generateQR() {
        QrData data = new QrData.Builder()
                .label(new String(this.txt_password.getPassword()))
                .secret(this.tb_accountpool.getValueAt(indexUserLogined, 2).toString())
                .issuer(this.txt_username.getText())
                .algorithm(HashingAlgorithm.SHA1) // More on this below
                .digits(DIGIT_TOKEN)
                .period(TIME_STEP)
                .build();

        String digits;
        try {
            TimeProvider timeProvider = new SystemTimeProvider();
            digits = this.getDigitsFromHash(this.generateHash(this.tb_accountpool.getValueAt(indexUserLogined, 2).toString(), timeProvider.getTime() / TIME_STEP));
            this.txt_otpToken.setText(digits);
            this.start(null);

        } catch (InvalidKeyException ex) {
            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.txt_otpauth.setText(data.getUri());

        QrGenerator generator = new ZxingPngQrGenerator();
        try {
            byte[] imageData = generator.generate(data);
            String mimeType = generator.getImageMimeType();
            String dataUri = Utils.getDataUriForImage(imageData, mimeType);

            // Remove the prefix if the base64 string has "data:image/png;base64," or similar
            String base64Image = dataUri.split(",")[1];
            // Decode base64 string into byte array
            byte[] imageBytes = Base64.getDecoder().decode(base64Image);

            // Convert byte array into BufferedImage
            ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
            BufferedImage image;
            try {
                image = ImageIO.read(bis);
                // Scale the image if necessary
                Image scaledImage = image.getScaledInstance(MAX_WIDTH_QRCODE, MAX_HEIGHT_QRCODE, Image.SCALE_DEFAULT);

                // Create ImageIcon and set it to JLabel
                ImageIcon imageIcon = new ImageIcon(scaledImage);

                this.lb_qrcode.setIcon(imageIcon);

            } catch (IOException ex) {
                Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (QrGenerationException ex) {
            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isExistedUsernameInTable(String username) {
        
        for (int i = 0; i < Math.min(MAX_ROW, this.row); i++) {
            if (username.equals(this.tb_accountpool.getValueAt(i, 0))) {
                return true;
            }
        }

        return false;
    }

    private void myLogic() {
//        QrData data = new QrData.Builder()
//                .label(new String(this.txt_password.getPassword()))
//                .secret(this.txt.getText())
//                .issuer(this.txt_username.getText())
//                .algorithm(HashingAlgorithm.SHA1) // More on this below
//                .digits(6)
//                .period(TIME_STEP)
//                .build();
//
//        String digits;
//        try {
//            TimeProvider timeProvider = new SystemTimeProvider();
//            digits = this.getDigitsFromHash(this.generateHash(this.txt_secret.getText(), timeProvider.getTime() / TIME_STEP));
//            this.txt_otpToken.setText(digits);
//            this.start(null);
//
//        } catch (InvalidKeyException ex) {
//            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (NoSuchAlgorithmException ex) {
//            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        this.txt_otpauth.setText(data.getUri());
//
//        QrGenerator generator = new ZxingPngQrGenerator();
//        try {
//            byte[] imageData = generator.generate(data);
//            String mimeType = generator.getImageMimeType();
//            String dataUri = Utils.getDataUriForImage(imageData, mimeType);
//
//            // Remove the prefix if the base64 string has "data:image/png;base64," or similar
//            String base64Image = dataUri.split(",")[1];
//            // Decode base64 string into byte array
//            byte[] imageBytes = Base64.getDecoder().decode(base64Image);
//
//            // Convert byte array into BufferedImage
//            ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes);
//            BufferedImage image;
//            try {
//                image = ImageIO.read(bis);
//                // Scale the image if necessary
//                Image scaledImage = image.getScaledInstance(300, 300, Image.SCALE_DEFAULT);
//
//                // Create ImageIcon and set it to JLabel
//                ImageIcon imageIcon = new ImageIcon(scaledImage);
//
//                this.lb_qrcode.setIcon(imageIcon);
//
//            } catch (IOException ex) {
//                Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        } catch (QrGenerationException ex) {
//            Logger.getLogger(frm_main.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_checktoken;
    private javax.swing.JButton btn_copy;
    private javax.swing.JButton btn_login;
    private javax.swing.JButton btn_register;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lb_OTPtoken;
    private javax.swing.JLabel lb_checkOTP;
    private javax.swing.JLabel lb_otpauth;
    private javax.swing.JLabel lb_password;
    private javax.swing.JLabel lb_qrcode;
    private javax.swing.JLabel lb_timer;
    private javax.swing.JLabel lb_title;
    private javax.swing.JLabel lb_tokenStatus;
    private javax.swing.JLabel lb_username;
    private javax.swing.JTable tb_accountpool;
    private javax.swing.JTextField txt_checktoken;
    private javax.swing.JTextField txt_otpToken;
    private javax.swing.JTextArea txt_otpauth;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables
}
